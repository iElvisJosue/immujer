/* eslint-disable react-hooks/rules-of-hooks */
/* eslint-disable no-undef */
useEffect(() => {
  if (!(infUsuario && permisosNotificaciones === "granted")) return;

  // Canal para comunicaci칩n entre pesta침as del mismo navegador
  const channel = new BroadcastChannel("sse_canal_unico");
  let source = null;
  let esPestanaLider = false;

  // Funci칩n para procesar notificaciones (se ejecuta en TODAS las pesta침as)
  const procesarNotificacion = (data) => {
    const { tipoNotificacion, idLlamada } = data;

    if (tipoNotificacion === "conectado") return;

    if (tipoNotificacion === "llamada-nueva") {
      establecerRecargarNotificaciones((prev) => prev + 1);
      establecerRecargarLlamadas((prev) => prev + 1);
      ReproducirAudio({});
      MostrarNotificacion({
        Titulo: "춰Nueva llamada realizada!",
        Detalles: `Haz clic para ver la informaci칩n completa de la llamada #${idLlamada}.`,
        ID: `llamada-nueva-${idLlamada}`,
        Silenciosa: true,
        onClick: () => {
          window.open(`/Llamadas?Vista=3&Id=${idLlamada}`, "_blank");
        },
      });
    }
  };

  // Funci칩n para establecer conexi칩n SSE (solo la pesta침a l칤der)
  const establecerConexion = () => {
    source = new EventSource(
      `${HOST}api/web/sistema/establecer-conexion-sse/${COOKIE_CON_TOKEN}`
    );

    source.onmessage = (event) => {
      const data = JSON.parse(event.data);

      // Enviar el evento a TODAS las pesta침as (incluyendo esta)
      channel.postMessage(data);

      // Procesar tambi칠n en esta pesta침a
      procesarNotificacion(data);
    };

    source.onerror = () => {
      source.close();
      setTimeout(() => {
        console.log("Reintentando reconectar...");
        if (esPestanaLider) {
          establecerConexion();
        }
      }, 5000);
    };
  };

  // Escuchar mensajes del canal (todas las pesta침as)
  channel.onmessage = (event) => {
    // Si es un dato SSE, procesarlo
    if (event.data.tipoNotificacion) {
      procesarNotificacion(event.data);
    }
    // Si otra pesta침a se declara l칤der, esta no debe serlo
    else if (event.data === "soy-lider") {
      esPestanaLider = false;
    }
  };

  // Preguntar si ya hay una pesta침a l칤der
  channel.postMessage("hay-lider?");

  // Si nadie responde en 100ms, esta pesta침a se vuelve l칤der
  const timeoutLider = setTimeout(() => {
    esPestanaLider = true;
    console.log("游꿢 Esta pesta침a establecer치 la 칰nica conexi칩n SSE");
    channel.postMessage("soy-lider");
    establecerConexion();
  }, 100);

  // Si alguien pregunta si hay l칤der y esta pesta침a lo es, responder
  const manejarPregunta = (event) => {
    if (event.data === "hay-lider?" && esPestanaLider) {
      channel.postMessage("soy-lider");
    }
  };

  channel.addEventListener("message", manejarPregunta);

  return () => {
    clearTimeout(timeoutLider);
    channel.removeEventListener("message", manejarPregunta);

    if (source) {
      console.log("Cerrando conexi칩n SSE");
      source.close();
    }

    channel.close();
  };
}, [infUsuario, permisosNotificaciones, reintentarConexionSSE]);
